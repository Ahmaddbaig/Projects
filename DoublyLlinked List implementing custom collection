
/**
 *
 * @author ahmadbaig
 * Description: this code implements a custom implmentaion of the doublylinked list and uses a more simplifies version
 * of list (list3130) which implements from a simplified version of the collection inyterface ( collection3130)
 */
import java.util.*;
import java.util.StringJoiner;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.function.*;
import java.util.Iterator;

public class DoublyLinkedList<E> implements List3130<E> {

    private static class Node<E> {

        private E data;
        private Node<E> previous;
        private Node<E> next;

        public Node(E data, Node<E> previous, Node<E> next) {
            this.data = data;
            this.previous = previous;
            this.next = next;
        }

        public Node(E data) {
            this(data, null, null);
        }
    }

    private Node<E> head;
    private Node<E> tail;
    private int size;

    public DoublyLinkedList() {
        head = null;
        tail = null;
        size = 0;
    }

    public void addFirst(E element) {
        Node<E> newNode = new Node<>(element, null, head);
        if (head == null) {
            tail = newNode;
        } else {
            head.previous = newNode;
        }
        head = newNode;
        size++;
    }

    public void addLast(E element) {
        Node<E> newNode = new Node<>(element, tail, null);
        if (tail == null) {
            head = newNode;
        } else {
            tail.next = newNode;
        }
        tail = newNode;
        size++;
    }

    public E getFirst() {
        if (head == null) {
            throw new NoSuchElementException();
        }
        return head.data;
    }

    public E getLast() {
        if (tail == null) {
            throw new NoSuchElementException();
        }
        return tail.data;
    }

    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    @Override
    public String toString() {
        StringJoiner sj = new StringJoiner(", ", "[", "]");
        Node<E> current = head;
        while (current != null) {
            sj.add(current.data.toString());
            current = current.next;
        }
        return sj.toString();
    }

    public String toReverseString() {
        StringJoiner sj = new StringJoiner(", ", "[", "]");
        Node<E> current = tail;
        while (current != null) {
            sj.add(current.data.toString());
            current = current.previous;
        }
        return sj.toString();
    }

    public E removeFirst() {
        if (isEmpty()) {
            throw new NoSuchElementException();
        }
        E data = head.data;
        if (size == 1) {
            head = null;
            tail = null;
        } else {
            head = head.next;
            head.previous = null;
        }
        size--;
        return data;
    }

    public E removeLast() {
        if (isEmpty()) {
            throw new NoSuchElementException();
        }
        E data = tail.data;
        if (size == 1) {
            head = null;
            tail = null;
        } else {
            tail = tail.previous;
            tail.next = null;
        }
        size--;
        return data;
    }

    public void clear() {
        size = 0;
        head = null;
        tail = null;
    }

    public boolean contains(Object o) {
        Node<E> current = head;
        while (current != null) {
            if (current.data.equals(o)) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    public boolean add(E e) {
        addLast(e);
        return true;
    }

    public boolean remove(Object obj) {
        Node<E> current = head;
        while (current != null) {
            if (obj == null ? current.data == null : obj.equals(current.data)) {
                if (current == head) {
                    removeFirst();
                } else if (current == tail) {
                    removeLast();
                } else {
                    current.previous.next = current.next;
                    current.next.previous = current.previous;
                    size--;
                }
                return true;
            }
            current = current.next;
        }
        return false;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof DoublyLinkedList) {
            DoublyLinkedList<?> other = (DoublyLinkedList<?>) obj;
            if (size != other.size) {
                return false;
            }
            Node<E> current = head;
            Node<?> otherCurrent = other.head;
            while (current != null) {
                if (!Objects.equals(current.data, otherCurrent.data)) {
                    return false;
                }
                current = current.next;
                otherCurrent = otherCurrent.next;
            }
            return true;
        }
        return false;
    }

    public int indexOf(Object o) {
        int index = 0;
        Node<E> current = head;
        while (current != null) {
            if (Objects.equals(o, current.data)) {
                return index;
            }
            index++;
            current = current.next;
        }
        return -1;
    }

    public int lastIndexOf(Object o) {
        int index = size - 1;
        Node<E> current = tail;
        while (current != null) {
            if (Objects.equals(o, current.data)) {
                return index;
            }
            index--;
            current = current.previous;
        }
        return -1;
    }

    public E get(int index) {
        int diff = size - index;
        int count = 0;
        Node<E> test = head;
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }
        if (diff < size / 2) {
            test = tail;
            while (count != diff - 1) {
                test = test.previous;
                count++;
            }
            return test.data;
        }
        while (count != index) {
            test = test.next;
            count++;
        }
        return test.data;
    }

    public E set(int index, E element) {
        int diff = size - index;
        int count = 0;
        Node<E> test = head;
        E old;
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }
        if (diff < size / 2) {
            test = tail;
            while (count != diff - 1) {
                test = test.previous;
                count++;
            }
            old = test.data;
            test.data = element;
            return old;
        }
        while (count != index) {
            test = test.next;
            count++;
        }
        old = test.data;
        test.data = element;
        return old;
    }

    public void add(int index, E element) {
        int diff = size - index;
        int count = 0;
        Node<E> test = head;
        Node<E> newNode = new Node<E>(element);
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException();
        }
        if (size == 0) {
            head = tail = new Node<E>(element);
            size++;
            return;
        }
        if (index == size) {
            addLast(element);
            return;
        }
        if (index == 0) {
            addFirst(element);
            return;
        }
        if (diff <= size / 2) {
            test = tail;
            while (count != diff) {
                test = test.previous;
                count++;
            }
        } else {
            while (count != index - 1) {
                test = test.next;
                count++;
            }
        }
        newNode.next = test.next;
        test.next = newNode;
        newNode.previous = test;
        newNode.next.previous = newNode;
        size++;
    }

    public E remove(int index) {
        int diff = size - index;
        int count = 0;
        Node<E> test = head;
        E old;
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }
        if (size == 1) {
            old = test.data;
            clear();
            return old;
        }
        if (index == 0) {
            old = test.data;
            removeFirst();
            return old;
        }
        if (index == size - 1) {
            old = tail.data;
            removeLast();
            return old;
        }
        if (diff <= size / 2) {
            test = tail;
            while (count != diff) {
                test = test.previous;
                count++;
            }
        } else {
            while (count != index) {
                test = test.next;
                count++;
            }
        }
        old = test.data;
        test.previous.next = test.next;
        test.next.previous = test.previous;
        size--;
        return old;
    }

    @Override
    public Iterator<E> iterator() {
        return new DoublyLinkedListIterator();
    }

    private class DoublyLinkedListIterator implements Iterator<E> {

        private Node<E> current = head;
        private Node<E> lastR = null;

        @Override
        public boolean hasNext() {
            return current != null;
        }

        @Override
        public E next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }
            lastR = current;
            E element = current.data;
            current = current.next;
            return element;
        }

        @Override
        public void remove() {
            if (lastR == null) {
                throw new IllegalStateException();
            }
            if (lastR.previous == null) {
                removeFirst();
                lastR = null;
                return;
            }
            if (lastR.next == null) {
                removeLast();
                lastR = null;
                return;
            }
            Node <E> x = lastR.previous;
            Node <E> y = lastR.next;
            x.next = y;
            y.previous = x;
            size--;
            lastR = null;
        }

    }

    
    public void replaceAll(UnaryOperator<E> operator) {
        for (Node<E> current = head; current != null; current = current.next) {
           current.data = operator.apply(current.data);
       }
    }

}





import java.util.Iterator;
import java.util.function.Predicate;

/**
 * A simplified version of the java.util.Collection interface.
 * Lacks some Collection methods.
 */
public interface Collection3130<E> extends Iterable<E> {
  int size();

  boolean isEmpty();

  boolean contains(Object o);

  boolean add(E e);

  boolean remove(Object o);

  void clear();

  default boolean removeIf(Predicate<? super E> filter) {
    Iterator<E> iterator = iterator();
    boolean removed = false;

    while (iterator.hasNext()) {
      if (filter.test(iterator.next())) {
        iterator.remove();
        removed = true;
      }
    }

    return removed;
  }
}






import java.util.function.UnaryOperator;
public interface List3130<E> extends Collection3130<E> {
  E get(int index);

  E set(int index, E element);

  void add(int index, E element);

  E remove(int index);

  int indexOf(Object o);

  int lastIndexOf(Object o);

  default void replaceAll(UnaryOperator<E> operator) {
    for (int i = 0; i < size(); i++) {
      set(i, operator.apply(get(i)));
    }
  }
}

